type DistributeRewards @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # Address of the user who initiated the reward distribution
  amountStaked: BigInt! # Amount staked in this event
  amount: BigInt! # Reward amount distributed in this event
  totalParticipants: Int # Number of users staked in the pool during this distribution
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # Address of the user withdrawing
  amount: BigInt! # Amount withdrawn
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AdminChanged @entity(immutable: true) {
  id: Bytes!
  previousAdmin: Bytes! # Address of the previous admin
  newAdmin: Bytes! # Address of the new admin
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeaconUpgraded @entity(immutable: true) {
  id: Bytes!
  beacon: Bytes! # Address of the new beacon
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # Address of the new implementation contract
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolEarnings @entity {
  id: ID!
  totalRewardsDistributed: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AccountState @entity {
  id: ID!
  account: Bytes! # Address of the account
  stLinkBalance: BigInt! # Current balance of stLINK (e.g., fetched with balanceOf)
  shares: BigInt # New field for sharesOf
  rewardsAccumulated: BigInt! # Total accumulated rewards in stLINK
  wrappedRewards: BigInt! # Total wrapped rewards in stLINK (use getWrappedByUnderlying)
  withdrawableRewards: BigInt! # Total rewards available for withdrawal (use withdrawableRewards function)
  wrappedTokenBalance: BigInt! # Balance of wrapped token (use balanceOf)
  lastUpdated: BigInt! # The timestamp when data was last updated
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserRewardDistribution @entity(immutable: true) {
  id: ID!
  account: Bytes! # Address of the user receiving rewards
  amount: BigInt! # Amount of reward distributed to this user
  totalStaked: BigInt! # Total amount staked by this user at the time of reward distribution
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
