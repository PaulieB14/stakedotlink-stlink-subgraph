type DistributeRewards @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # Address of the user who initiated the reward distribution
  amountStaked: BigInt! # Amount staked in this event
  amount: BigInt! # Reward amount distributed in this event
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # Address of the user withdrawing
  amount: BigInt! # Amount withdrawn
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AdminChanged @entity(immutable: true) {
  id: Bytes!
  previousAdmin: Bytes! # Address of the previous admin
  newAdmin: Bytes! # Address of the new admin
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeaconUpgraded @entity(immutable: true) {
  id: Bytes!
  beacon: Bytes! # Address of the new beacon
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # Address of the new implementation contract
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolEarnings @entity {
  id: ID!
  totalRewardsDistributed: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AccountState @entity {
  id: ID!
  account: Bytes! # Address of the account
  stLinkBalance: BigInt! # Current balance of stLINK
  rewardsAccumulated: BigInt! # Total accumulated rewards in stLINK
  wrappedRewards: BigInt! # Total rewards in stLINK
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
